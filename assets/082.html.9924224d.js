import{r as t,o,a as c,b as n,d as p,F as l,e as s,c as e}from"./app.897a2dcd.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const u={},i=n("h1",{id:"\u53CC\u6307\u9488",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u53CC\u6307\u9488","aria-hidden":"true"},"#"),s(" \u53CC\u6307\u9488")],-1),k=n("h2",{id:"\u6570\u7EC4",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u6570\u7EC4","aria-hidden":"true"},"#"),s(" \u6570\u7EC4")],-1),b={id:"_15-\u4E09\u6570\u4E4B\u548C",tabindex:"-1"},m=n("a",{class:"header-anchor",href:"#_15-\u4E09\u6570\u4E4B\u548C","aria-hidden":"true"},"#",-1),d=s(),h={href:"https://leetcode.cn/problems/3sum/",target:"_blank",rel:"noopener noreferrer"},f=s("15. \u4E09\u6570\u4E4B\u548C"),y=e(`<details class="custom-container details"><summary>15. \u4E09\u6570\u4E4B\u548C</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u63CF\u8FF0\uFF1A\u7ED9\u5B9A\u4E00\u4E2A\u6574\u6570\u6570\u7EC4 nums\u3002</span>

<span class="token comment"># \u8981\u6C42\uFF1A\u5224\u65AD nums \u4E2D\u662F\u5426\u5B58\u5728\u4E09\u4E2A\u5143\u7D20 a\u3001b\u3001c\uFF0C\u6EE1\u8DB3 a + b + c == 0\u3002\u8981\u6C42\u627E\u51FA\u6240\u6709\u6EE1\u8DB3\u8981\u6C42\u7684\u4E0D\u91CD\u590D\u7684\u4E09\u5143\u7EC4\u3002</span>


<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">threeSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            left <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>
            right <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token comment"># \u6392\u5E8F\u4E4B\u540E\u5982\u679C\u7B2C\u4E00\u4E2A\u5143\u7D20\u5DF2\u7ECF\u5927\u4E8E\u96F6\uFF0C\u90A3\u4E48\u65E0\u8BBA\u5982\u4F55\u7EC4\u5408\u90FD\u4E0D\u53EF\u80FD\u51D1\u6210\u4E09\u5143\u7EC4\uFF0C\u76F4\u63A5\u8FD4\u56DE\u7ED3\u679C\u5C31\u53EF\u4EE5\u4E86</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                <span class="token keyword">break</span>
            <span class="token comment"># \u53BB\u91CD</span>
            <span class="token keyword">if</span> i <span class="token operator">&gt;=</span> <span class="token number">1</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
                total <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span>
                <span class="token keyword">if</span> total <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    right <span class="token operator">-=</span> <span class="token number">1</span>
                <span class="token keyword">elif</span> total <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>
                    left <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                    <span class="token comment"># \u53BB\u91CD\u903B\u8F91\u5E94\u8BE5\u653E\u5728\u627E\u5230\u4E00\u4E2A\u4E09\u5143\u7EC4\u4E4B\u540E\uFF0C\u5BF9b \u548C c\u53BB\u91CD</span>
                    <span class="token keyword">while</span> left <span class="token operator">!=</span> right <span class="token keyword">and</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                        left <span class="token operator">+=</span> <span class="token number">1</span>
                    <span class="token keyword">while</span> left <span class="token operator">!=</span> right <span class="token keyword">and</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                        right <span class="token operator">-=</span> <span class="token number">1</span>
                    left <span class="token operator">+=</span> <span class="token number">1</span>
                    right <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br></div></div></details>`,1),_={id:"_18-\u56DB\u6570\u4E4B\u548C",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#_18-\u56DB\u6570\u4E4B\u548C","aria-hidden":"true"},"#",-1),g=s(),v={href:"https://leetcode.cn/problems/4sum/",target:"_blank",rel:"noopener noreferrer"},x=s("18. \u56DB\u6570\u4E4B\u548C"),N=e(`<details class="custom-container details"><summary>18. \u56DB\u6570\u4E4B\u548C</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u7ED9\u5B9A\u4E00\u4E2A\u6574\u6570\u6570\u7EC4 nums \u548C\u4E00\u4E2A\u76EE\u6807\u503C target\uFF0C\u5224\u65AD nums \u4E2D\u662F\u5426\u5B58\u5728\u56DB\u4E2A\u5143\u7D20 a\u3001b\u3001c\u3001d\uFF0C\u4F7F\u5F97 a + b + c + d = target</span>

<span class="token comment"># \u8981\u6C42\u627E\u51FA\u6240\u6709\u6EE1\u8DB3\u6761\u4EF6\u4E14\u4E0D\u91CD\u590D\u7684\u56DB\u5143\u7EC4\u3002</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">fourSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># \u5BF9nums[i]\u53BB\u91CD</span>
            <span class="token keyword">if</span> i <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                <span class="token keyword">continue</span>
            <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> k <span class="token operator">&gt;</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                    <span class="token keyword">continue</span>
                left <span class="token operator">=</span> k <span class="token operator">+</span> <span class="token number">1</span>
                right <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span>
                <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
                    <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&gt;</span> target<span class="token punctuation">:</span>
                        right <span class="token operator">-=</span> <span class="token number">1</span>
                    <span class="token keyword">elif</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">&lt;</span> target<span class="token punctuation">:</span>
                        left <span class="token operator">+=</span> <span class="token number">1</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>
                        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                            left <span class="token operator">+=</span> <span class="token number">1</span>
                        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right <span class="token keyword">and</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> nums<span class="token punctuation">[</span>right <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                            right <span class="token operator">-=</span> <span class="token number">1</span>
                        left <span class="token operator">+=</span> <span class="token number">1</span>
                        right <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div></details>`,1),q={id:"_27-\u79FB\u9664\u5143\u7D20",tabindex:"-1"},L=n("a",{class:"header-anchor",href:"#_27-\u79FB\u9664\u5143\u7D20","aria-hidden":"true"},"#",-1),S=s(),E={href:"https://leetcode.cn/problems/remove-element/",target:"_blank",rel:"noopener noreferrer"},F=s("27. \u79FB\u9664\u5143\u7D20"),I=e(`<details class="custom-container details"><summary>\u79FB\u9664\u5143\u7D20 \u3010\u5FEB\u6162\u6307\u9488\u3011</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">removeElement</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        slow <span class="token operator">=</span> <span class="token number">0</span>
        fast <span class="token operator">=</span> <span class="token number">0</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>
        <span class="token keyword">while</span> fast <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>
            <span class="token keyword">if</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span> <span class="token operator">!=</span> val<span class="token punctuation">:</span>
                nums<span class="token punctuation">[</span>slow<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>fast<span class="token punctuation">]</span>
                slow <span class="token operator">+=</span> <span class="token number">1</span>
            fast <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> slow
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></details><h2 id="\u5B57\u7B26\u4E32" tabindex="-1"><a class="header-anchor" href="#\u5B57\u7B26\u4E32" aria-hidden="true">#</a> \u5B57\u7B26\u4E32</h2>`,2),V={id:"_125-\u9A8C\u8BC1\u56DE\u6587\u4E32",tabindex:"-1"},B=n("a",{class:"header-anchor",href:"#_125-\u9A8C\u8BC1\u56DE\u6587\u4E32","aria-hidden":"true"},"#",-1),D=s(),j={href:"https://leetcode.cn/problems/valid-palindrome/",target:"_blank",rel:"noopener noreferrer"},C=s("125. \u9A8C\u8BC1\u56DE\u6587\u4E32"),P=e(`<details class="custom-container details"><summary>125. \u9A8C\u8BC1\u56DE\u6587\u4E32</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u63CF\u8FF0\uFF1A\u7ED9\u5B9A\u4E00\u4E2A\u5B57\u7B26\u4E32 s\u3002</span>

<span class="token comment"># \u8981\u6C42\uFF1A\u5224\u65AD\u662F\u5426\u4E3A\u56DE\u6587\u4E32\uFF08\u53EA\u8003\u8651\u5B57\u7B26\u4E32\u4E2D\u7684\u5B57\u6BCD\u548C\u6570\u5B57\u5B57\u7B26\uFF0C\u5E76\u4E14\u5FFD\u7565\u5B57\u6BCD\u7684\u5927\u5C0F\u5199\uFF09\u3002</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token comment"># \u53CC\u6307\u9488</span>
    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        left <span class="token operator">=</span> <span class="token number">0</span>
        right <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">continue</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                right <span class="token operator">-=</span> <span class="token number">1</span>
                <span class="token keyword">continue</span>

            <span class="token keyword">if</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
                right <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>

    <span class="token keyword">def</span> <span class="token function">isPalindrome2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        s1 <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ch<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> ch <span class="token keyword">in</span> s <span class="token keyword">if</span> ch<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> s1 <span class="token operator">==</span> s1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div></details>`,1),T={id:"_151-\u53CD\u8F6C\u5B57\u7B26\u4E32\u4E2D\u7684\u5355\u8BCD",tabindex:"-1"},O=n("a",{class:"header-anchor",href:"#_151-\u53CD\u8F6C\u5B57\u7B26\u4E32\u4E2D\u7684\u5355\u8BCD","aria-hidden":"true"},"#",-1),W=s(),z={href:"https://leetcode.cn/problems/reverse-words-in-a-string/",target:"_blank",rel:"noopener noreferrer"},A=s("151. \u53CD\u8F6C\u5B57\u7B26\u4E32\u4E2D\u7684\u5355\u8BCD"),G=e(`<details class="custom-container details"><summary>\u53CD\u8F6C\u5B57\u7B26\u4E32\u4E2D\u7684\u5355\u8BCD</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token comment"># \u79FB\u9664\u591A\u4F59\u7A7A\u683C</span>
    <span class="token keyword">def</span> <span class="token function">trim</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        left <span class="token operator">=</span> <span class="token number">0</span>
        right <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right <span class="token keyword">and</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">:</span>
            left <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right <span class="token keyword">and</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">:</span>
            right <span class="token operator">-=</span> <span class="token number">1</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>
            <span class="token keyword">if</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">:</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">elif</span> res<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">:</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>
            left <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> res

    <span class="token comment"># \u7FFB\u8F6C\u5B57\u7B26\u4E32\u6570\u7EC4</span>
    <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
            s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
            left <span class="token operator">+=</span> <span class="token number">1</span>
            right <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>

    <span class="token comment"># \u7FFB\u8F6C\u6BCF\u4E2A\u5355\u8BCD</span>
    <span class="token keyword">def</span> <span class="token function">reverse_each_word</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">:</span>
        start <span class="token operator">=</span> <span class="token number">0</span>
        end <span class="token operator">=</span> <span class="token number">0</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>
        <span class="token keyword">while</span> start <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>
            <span class="token keyword">while</span> end <span class="token operator">&lt;</span> n <span class="token keyword">and</span> l<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">:</span>
                end <span class="token operator">+=</span> <span class="token number">1</span>
            self<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span>l<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
            start <span class="token operator">=</span> end <span class="token operator">+</span> <span class="token number">1</span>
            end <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        l <span class="token operator">=</span> self<span class="token punctuation">.</span>trim<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span>l<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>reverse_each_word<span class="token punctuation">(</span>l<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>l<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div></details>`,1),H={id:"_344-\u53CD\u8F6C\u5B57\u7B26\u4E32",tabindex:"-1"},J=n("a",{class:"header-anchor",href:"#_344-\u53CD\u8F6C\u5B57\u7B26\u4E32","aria-hidden":"true"},"#",-1),K=s(),M={href:"https://leetcode.cn/problems/reverse-string/",target:"_blank",rel:"noopener noreferrer"},Q=s("344. \u53CD\u8F6C\u5B57\u7B26\u4E32"),R=e(`<details class="custom-container details"><summary>\u53CD\u8F6C\u5B57\u7B26\u4E32 \u3010\u53CC\u6307\u9488\uFF1F\u3011</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u4F7F\u7528\u4E24\u4E2A\u6307\u9488 left\uFF0Cright\u3002left \u6307\u5411\u5B57\u7B26\u6570\u7EC4\u5F00\u59CB\u4F4D\u7F6E\uFF0Cright \u6307\u5411\u5B57\u7B26\u6570\u7EC4\u7ED3\u675F\u4F4D\u7F6E\u3002</span>
<span class="token comment"># \u4EA4\u6362 s[left] \u548C s[right]\uFF0C\u5C06 left \u53F3\u79FB\u3001right \u5DE6\u79FB\u3002</span>
<span class="token comment"># \u5982\u679C\u9047\u5230 left == right\uFF0C\u8DF3\u51FA\u5FAA\u73AF</span>

<span class="token comment"># \u4E0D\u8981\u7ED9\u53E6\u5916\u7684\u6570\u7EC4\u5206\u914D\u989D\u5916\u7684\u7A7A\u95F4\uFF0C\u4F60\u5FC5\u987B\u539F\u5730\u4FEE\u6539\u8F93\u5165\u6570\u7EC4\u3001\u4F7F\u7528 O(1) \u7684\u989D\u5916\u7A7A\u95F4\u89E3\u51B3\u8FD9\u4E00\u95EE\u9898</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reverseString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        left <span class="token operator">=</span> <span class="token number">0</span>
        right <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
            s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
            left <span class="token operator">+=</span> <span class="token number">1</span>
            right <span class="token operator">-=</span> <span class="token number">1</span>

    <span class="token comment"># \u4F7F\u7528\u989D\u5916\u7A7A\u95F4</span>
    <span class="token keyword">def</span> <span class="token function">reverseString2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></details><h2 id="\u94FE\u8868" tabindex="-1"><a class="header-anchor" href="#\u94FE\u8868" aria-hidden="true">#</a> \u94FE\u8868</h2>`,2),U={id:"_19-\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C-n-\u4E2A\u7ED3\u70B9",tabindex:"-1"},X=n("a",{class:"header-anchor",href:"#_19-\u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C-n-\u4E2A\u7ED3\u70B9","aria-hidden":"true"},"#",-1),Y=s(),Z={href:"https://leetcode.cn/problems/remove-nth-node-from-end-of-list/",target:"_blank",rel:"noopener noreferrer"},$=s("19. \u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C N \u4E2A\u7ED3\u70B9"),nn=e(`<details class="custom-container details"><summary>19. \u5220\u9664\u94FE\u8868\u7684\u5012\u6570\u7B2C N \u4E2A\u7ED3\u70B9</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span>


<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        dummy <span class="token operator">=</span> ListNode<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>
        dummy<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> head
        <span class="token comment"># \u5220\u9664\u5012\u6570\u7B2C n \u4E2A\uFF0C\u8981\u5148\u627E\u5012\u6570\u7B2C n + 1 \u4E2A\u8282\u70B9</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>findFromEnd<span class="token punctuation">(</span>dummy<span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>
        <span class="token comment"># \u5220\u6389\u5012\u6570\u7B2C n \u4E2A\u8282\u70B9</span>
        x<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> x<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> dummy<span class="token punctuation">.</span><span class="token builtin">next</span>

    <span class="token keyword">def</span> <span class="token function">findFromEnd</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        p1 <span class="token operator">=</span> head
        <span class="token comment"># p1 \u5148\u8D70 n \u6B65</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>
            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token builtin">next</span>
        p2 <span class="token operator">=</span> head
        <span class="token comment"># p1 \u548C p2 \u540C\u65F6\u8D70 n - k \u6B65</span>
        <span class="token keyword">while</span> p1<span class="token punctuation">:</span>
            p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span><span class="token builtin">next</span>
            p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token comment"># p2 \u73B0\u5728\u6307\u5411\u7B2C n - k + 1 \u4E2A\u8282\u70B9\uFF0C\u5373\u5012\u6570\u7B2C k \u4E2A\u8282\u70B9</span>
        <span class="token keyword">return</span> p2
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div></details>`,1),sn={id:"_142-\u73AF\u5F62\u94FE\u8868-ii",tabindex:"-1"},an=n("a",{class:"header-anchor",href:"#_142-\u73AF\u5F62\u94FE\u8868-ii","aria-hidden":"true"},"#",-1),pn=s(),en={href:"https://leetcode.cn/problems/linked-list-cycle-ii/",target:"_blank",rel:"noopener noreferrer"},tn=s("142. \u73AF\u5F62\u94FE\u8868 II"),on=e(`<details class="custom-container details"><summary>142. \u73AF\u5F62\u94FE\u8868 II</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> x
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token boolean">None</span>


<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">detectCycle</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        <span class="token comment"># \u5FEB\u6162\u6307\u9488\u521D\u59CB\u5316\u6307\u5411 head</span>
        slow <span class="token operator">=</span> fast <span class="token operator">=</span> head
        <span class="token keyword">while</span> fast <span class="token keyword">and</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">:</span>
            <span class="token comment"># \u6162\u6307\u9488\u8D70\u4E00\u6B65\uFF0C\u5FEB\u6307\u9488\u8D70\u4E24\u6B65</span>
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">.</span><span class="token builtin">next</span>
            <span class="token comment"># \u5FEB\u6162\u6307\u9488\u76F8\u9047\uFF0C\u8BF4\u660E\u542B\u6709\u73AF</span>
            <span class="token keyword">if</span> slow <span class="token operator">==</span> fast<span class="token punctuation">:</span>
                <span class="token keyword">break</span>
        <span class="token comment"># fast \u9047\u5230\u7A7A\u6307\u9488\u8BF4\u660E\u6CA1\u6709\u73AF</span>
        <span class="token keyword">if</span> fast <span class="token keyword">is</span> <span class="token boolean">None</span> <span class="token keyword">or</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        slow <span class="token operator">=</span> head
        <span class="token comment"># \u5FEB\u6162\u6307\u9488\u540C\u6B65\u524D\u8FDB\uFF0C\u76F8\u4EA4\u70B9\u5C31\u662F\u73AF\u8D77\u70B9</span>
        <span class="token keyword">while</span> slow <span class="token operator">!=</span> fast<span class="token punctuation">:</span>
            slow <span class="token operator">=</span> slow<span class="token punctuation">.</span><span class="token builtin">next</span>
            fast <span class="token operator">=</span> fast<span class="token punctuation">.</span><span class="token builtin">next</span>
        <span class="token keyword">return</span> slow
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div></details>`,1),cn={id:"_206-\u53CD\u8F6C\u94FE\u8868",tabindex:"-1"},ln=n("a",{class:"header-anchor",href:"#_206-\u53CD\u8F6C\u94FE\u8868","aria-hidden":"true"},"#",-1),rn=s(),un={href:"https://leetcode.cn/problems/reverse-linked-list/",target:"_blank",rel:"noopener noreferrer"},kn=s("206. \u53CD\u8F6C\u94FE\u8868"),bn=e(`<details class="custom-container details"><summary>206. \u53CD\u8F6C\u94FE\u8868</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># Definition for singly-linked list.</span>
<span class="token keyword">class</span> <span class="token class-name">ListNode</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">next</span><span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>val <span class="token operator">=</span> val
        self<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> <span class="token builtin">next</span>


<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reverseList</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> head<span class="token punctuation">:</span> ListNode<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> ListNode<span class="token punctuation">:</span>
        pre <span class="token operator">=</span> <span class="token boolean">None</span>
        cur <span class="token operator">=</span> <span class="token boolean">None</span>
        <span class="token keyword">while</span> head<span class="token punctuation">:</span>
            cur <span class="token operator">=</span> head<span class="token punctuation">.</span><span class="token builtin">next</span>  <span class="token comment"># \u6293\u624B</span>
            head<span class="token punctuation">.</span><span class="token builtin">next</span> <span class="token operator">=</span> pre  <span class="token comment"># \u53CD\u8F6C</span>
            pre <span class="token operator">=</span> head
            head <span class="token operator">=</span> cur      <span class="token comment"># \u5F80\u4E0B\u8D70</span>
        <span class="token keyword">return</span> pre
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></details>`,1);function mn(dn,hn){const a=t("ExternalLinkIcon");return o(),c(l,null,[i,k,n("h3",b,[m,d,n("a",h,[f,p(a)])]),y,n("h3",_,[w,g,n("a",v,[x,p(a)])]),N,n("h3",q,[L,S,n("a",E,[F,p(a)])]),I,n("h3",V,[B,D,n("a",j,[C,p(a)])]),P,n("h3",T,[O,W,n("a",z,[A,p(a)])]),G,n("h3",H,[J,K,n("a",M,[Q,p(a)])]),R,n("h3",U,[X,Y,n("a",Z,[$,p(a)])]),nn,n("h3",sn,[an,pn,n("a",en,[tn,p(a)])]),on,n("h3",cn,[ln,rn,n("a",un,[kn,p(a)])]),bn],64)}var _n=r(u,[["render",mn]]);export{_n as default};
