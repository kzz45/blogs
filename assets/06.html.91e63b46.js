import{r as e,o,a as c,b as n,d as p,F as l,e as s,c as t}from"./app.897a2dcd.js";import{_ as r}from"./plugin-vue_export-helper.21dcd24c.js";const u={},i=n("h1",{id:"\u5B57\u7B26\u4E32",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u5B57\u7B26\u4E32","aria-hidden":"true"},"#"),s(" \u5B57\u7B26\u4E32")],-1),k={id:"_3-\u65E0\u91CD\u590D\u5B57\u7B26\u7684\u6700\u957F\u5B50\u4E32",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#_3-\u65E0\u91CD\u590D\u5B57\u7B26\u7684\u6700\u957F\u5B50\u4E32","aria-hidden":"true"},"#",-1),m=s(),d={href:"https://leetcode.cn/problems/longest-substring-without-repeating-characters/",target:"_blank",rel:"noopener noreferrer"},h=s("3. \u65E0\u91CD\u590D\u5B57\u7B26\u7684\u6700\u957F\u5B50\u4E32"),f=s(" \u{1F4AF}"),y=t(`<details class="custom-container details"><summary>3. \u65E0\u91CD\u590D\u5B57\u7B26\u7684\u6700\u957F\u5B50\u4E32</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u8FD9\u9053\u9898\u4E3B\u8981\u7528\u5230\u601D\u8DEF\u662F\uFF1A\u6ED1\u52A8\u7A97\u53E3</span>

<span class="token comment"># \u4EC0\u4E48\u662F\u6ED1\u52A8\u7A97\u53E3\uFF1F</span>

<span class="token comment"># \u5176\u5B9E\u5C31\u662F\u4E00\u4E2A\u961F\u5217,\u6BD4\u5982\u4F8B\u9898\u4E2D\u7684 abcabcbb\uFF0C\u8FDB\u5165\u8FD9\u4E2A\u961F\u5217\uFF08\u7A97\u53E3\uFF09\u4E3A abc \u6EE1\u8DB3\u9898\u76EE\u8981\u6C42\uFF0C\u5F53\u518D\u8FDB\u5165 a\uFF0C\u961F\u5217\u53D8\u6210\u4E86 abca\uFF0C\u8FD9\u65F6\u5019\u4E0D\u6EE1\u8DB3\u8981\u6C42\u3002\u6240\u4EE5\uFF0C\u6211\u4EEC\u8981\u79FB\u52A8\u8FD9\u4E2A\u961F\u5217\uFF01</span>

<span class="token comment"># \u5982\u4F55\u79FB\u52A8\uFF1F</span>

<span class="token comment"># \u6211\u4EEC\u53EA\u8981\u628A\u961F\u5217\u7684\u5DE6\u8FB9\u7684\u5143\u7D20\u79FB\u51FA\u5C31\u884C\u4E86\uFF0C\u76F4\u5230\u6EE1\u8DB3\u9898\u76EE\u8981\u6C42\uFF01</span>

<span class="token comment"># \u4E00\u76F4\u7EF4\u6301\u8FD9\u6837\u7684\u961F\u5217\uFF0C\u627E\u51FA\u961F\u5217\u51FA\u73B0\u6700\u957F\u7684\u957F\u5EA6\u65F6\u5019\uFF0C\u6C42\u51FA\u89E3\uFF01</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        left <span class="token operator">=</span> <span class="token number">0</span>
        window <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        cur_len <span class="token operator">=</span> <span class="token number">0</span>
        max_len <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            cur_len <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">while</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> window<span class="token punctuation">:</span>
                window<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
                cur_len <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token keyword">if</span> cur_len <span class="token operator">&gt;</span> max_len<span class="token punctuation">:</span>
                max_len <span class="token operator">=</span> cur_len
            window<span class="token punctuation">.</span>add<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> max_len

    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        left <span class="token operator">=</span> <span class="token number">0</span>
        right <span class="token operator">=</span> <span class="token number">0</span>
        res <span class="token operator">=</span> <span class="token number">0</span>
        window <span class="token operator">=</span> <span class="token builtin">dict</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">while</span> right <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token keyword">not</span> <span class="token keyword">in</span> window<span class="token punctuation">:</span>
                window<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                window<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>

            <span class="token keyword">while</span> window<span class="token punctuation">[</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> <span class="token number">1</span><span class="token punctuation">:</span>
                window<span class="token punctuation">[</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>

            res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> right <span class="token operator">-</span> left <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>

            right <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> res

    <span class="token keyword">def</span> <span class="token function">lengthOfLongestSubstring3</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>
        charset <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
        res <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">and</span> right <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token keyword">in</span> charset<span class="token punctuation">:</span>
                <span class="token keyword">if</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token keyword">in</span> charset<span class="token punctuation">:</span>
                    charset<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                charset<span class="token punctuation">.</span>add<span class="token punctuation">(</span>s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span>
                right <span class="token operator">+=</span> <span class="token number">1</span>
                res <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>charset<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br><span class="line-number">52</span><br><span class="line-number">53</span><br><span class="line-number">54</span><br><span class="line-number">55</span><br><span class="line-number">56</span><br><span class="line-number">57</span><br><span class="line-number">58</span><br><span class="line-number">59</span><br><span class="line-number">60</span><br><span class="line-number">61</span><br><span class="line-number">62</span><br><span class="line-number">63</span><br></div></div></details>`,1),_={id:"_5-\u6700\u957F\u56DE\u6587\u5B50\u4E32",tabindex:"-1"},w=n("a",{class:"header-anchor",href:"#_5-\u6700\u957F\u56DE\u6587\u5B50\u4E32","aria-hidden":"true"},"#",-1),g=s(),v={href:"https://leetcode.cn/problems/longest-palindromic-substring/",target:"_blank",rel:"noopener noreferrer"},x=s("5. \u6700\u957F\u56DE\u6587\u5B50\u4E32"),q=t(`<details class="custom-container details"><summary>\u6700\u957F\u56DE\u6587\u5B50\u4E32</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> s

        max_len <span class="token operator">=</span> <span class="token number">1</span>
        begin <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token comment"># dp[i][j] \u8868\u793A s[i..j] \u662F\u5426\u662F\u56DE\u6587\u4E32</span>
        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> n <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>

        <span class="token comment"># \u9012\u63A8\u5F00\u59CB</span>
        <span class="token comment"># \u5148\u679A\u4E3E\u5B50\u4E32\u957F\u5EA6</span>
        <span class="token keyword">for</span> L <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token comment"># \u679A\u4E3E\u5DE6\u8FB9\u754C\uFF0C\u5DE6\u8FB9\u754C\u7684\u4E0A\u9650\u8BBE\u7F6E\u53EF\u4EE5\u5BBD\u677E\u4E00\u4E9B</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token comment"># \u7531 L \u548C i \u53EF\u4EE5\u786E\u5B9A\u53F3\u8FB9\u754C\uFF0C\u5373 j - i + 1 = L \u5F97</span>
                j <span class="token operator">=</span> L <span class="token operator">+</span> i <span class="token operator">-</span> <span class="token number">1</span>
                <span class="token comment"># \u5982\u679C\u53F3\u8FB9\u754C\u8D8A\u754C\uFF0C\u5C31\u53EF\u4EE5\u9000\u51FA\u5F53\u524D\u5FAA\u73AF</span>
                <span class="token keyword">if</span> j <span class="token operator">&gt;=</span> n<span class="token punctuation">:</span>
                    <span class="token keyword">break</span>

                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>
                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">False</span>
                <span class="token keyword">else</span><span class="token punctuation">:</span>
                    <span class="token keyword">if</span> j <span class="token operator">-</span> i <span class="token operator">&lt;</span> <span class="token number">3</span><span class="token punctuation">:</span>
                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>
                    <span class="token keyword">else</span><span class="token punctuation">:</span>
                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>

                <span class="token comment"># \u53EA\u8981 dp[i][L] == true \u6210\u7ACB\uFF0C\u5C31\u8868\u793A\u5B50\u4E32 s[i..L] \u662F\u56DE\u6587\uFF0C\u6B64\u65F6\u8BB0\u5F55\u56DE\u6587\u957F\u5EA6\u548C\u8D77\u59CB\u4F4D\u7F6E</span>
                <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">and</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&gt;</span> max_len<span class="token punctuation">:</span>
                    max_len <span class="token operator">=</span> j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span>
                    begin <span class="token operator">=</span> i
        <span class="token keyword">return</span> s<span class="token punctuation">[</span>begin<span class="token punctuation">:</span>begin <span class="token operator">+</span> max_len<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div></details>`,1),j={id:"_125-\u9A8C\u8BC1\u56DE\u6587\u4E32",tabindex:"-1"},S=n("a",{class:"header-anchor",href:"#_125-\u9A8C\u8BC1\u56DE\u6587\u4E32","aria-hidden":"true"},"#",-1),L=s(),I={href:"https://leetcode.cn/problems/valid-palindrome/",target:"_blank",rel:"noopener noreferrer"},O=s("125. \u9A8C\u8BC1\u56DE\u6587\u4E32"),F=t(`<details class="custom-container details"><summary>125. \u9A8C\u8BC1\u56DE\u6587\u4E32</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u63CF\u8FF0\uFF1A\u7ED9\u5B9A\u4E00\u4E2A\u5B57\u7B26\u4E32 s\u3002</span>

<span class="token comment"># \u8981\u6C42\uFF1A\u5224\u65AD\u662F\u5426\u4E3A\u56DE\u6587\u4E32\uFF08\u53EA\u8003\u8651\u5B57\u7B26\u4E32\u4E2D\u7684\u5B57\u6BCD\u548C\u6570\u5B57\u5B57\u7B26\uFF0C\u5E76\u4E14\u5FFD\u7565\u5B57\u6BCD\u7684\u5927\u5C0F\u5199\uFF09\u3002</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token comment"># \u53CC\u6307\u9488</span>
    <span class="token keyword">def</span> <span class="token function">isPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        left <span class="token operator">=</span> <span class="token number">0</span>
        right <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
                <span class="token keyword">continue</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                right <span class="token operator">-=</span> <span class="token number">1</span>
                <span class="token keyword">continue</span>

            <span class="token keyword">if</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
                right <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">False</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span>

    <span class="token keyword">def</span> <span class="token function">isPalindrome2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        s1 <span class="token operator">=</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>ch<span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> ch <span class="token keyword">in</span> s <span class="token keyword">if</span> ch<span class="token punctuation">.</span>isalnum<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> s1 <span class="token operator">==</span> s1<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br></div></div></details>`,1),N={id:"_151-\u53CD\u8F6C\u5B57\u7B26\u4E32\u4E2D\u7684\u5355\u8BCD",tabindex:"-1"},T=n("a",{class:"header-anchor",href:"#_151-\u53CD\u8F6C\u5B57\u7B26\u4E32\u4E2D\u7684\u5355\u8BCD","aria-hidden":"true"},"#",-1),P=s(),V={href:"https://leetcode.cn/problems/reverse-words-in-a-string/",target:"_blank",rel:"noopener noreferrer"},z=s("151. \u53CD\u8F6C\u5B57\u7B26\u4E32\u4E2D\u7684\u5355\u8BCD"),B=s(" \u{1F4AF}"),E=t(`<details class="custom-container details"><summary>\u53CD\u8F6C\u5B57\u7B26\u4E32\u4E2D\u7684\u5355\u8BCD</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token comment"># \u79FB\u9664\u591A\u4F59\u7A7A\u683C</span>
    <span class="token keyword">def</span> <span class="token function">trim</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        left <span class="token operator">=</span> <span class="token number">0</span>
        right <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right <span class="token keyword">and</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">:</span>
            left <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right <span class="token keyword">and</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">:</span>
            right <span class="token operator">-=</span> <span class="token number">1</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;=</span> right<span class="token punctuation">:</span>
            <span class="token keyword">if</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">:</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>
            <span class="token keyword">elif</span> res<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">:</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span>
            left <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> res

    <span class="token comment"># \u7FFB\u8F6C\u5B57\u7B26\u4E32\u6570\u7EC4</span>
    <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
            s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
            left <span class="token operator">+=</span> <span class="token number">1</span>
            right <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>

    <span class="token comment"># \u7FFB\u8F6C\u6BCF\u4E2A\u5355\u8BCD</span>
    <span class="token keyword">def</span> <span class="token function">reverse_each_word</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">:</span>
        start <span class="token operator">=</span> <span class="token number">0</span>
        end <span class="token operator">=</span> <span class="token number">0</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span>
        <span class="token keyword">while</span> start <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>
            <span class="token keyword">while</span> end <span class="token operator">&lt;</span> n <span class="token keyword">and</span> l<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">:</span>
                end <span class="token operator">+=</span> <span class="token number">1</span>
            self<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span>l<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
            start <span class="token operator">=</span> end <span class="token operator">+</span> <span class="token number">1</span>
            end <span class="token operator">+=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token boolean">None</span>

    <span class="token keyword">def</span> <span class="token function">reverseWords</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        l <span class="token operator">=</span> self<span class="token punctuation">.</span>trim<span class="token punctuation">(</span>s<span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span>l<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>reverse_each_word<span class="token punctuation">(</span>l<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>l<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div></details>`,1),W={id:"_344-\u53CD\u8F6C\u5B57\u7B26\u4E32",tabindex:"-1"},C=n("a",{class:"header-anchor",href:"#_344-\u53CD\u8F6C\u5B57\u7B26\u4E32","aria-hidden":"true"},"#",-1),A=s(),D={href:"https://leetcode.cn/problems/reverse-string/",target:"_blank",rel:"noopener noreferrer"},G=s("344. \u53CD\u8F6C\u5B57\u7B26\u4E32"),H=s(" \u{1F4AF}"),J=t(`<details class="custom-container details"><summary>\u53CD\u8F6C\u5B57\u7B26\u4E32 \u3010\u53CC\u6307\u9488\u3011</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u4F7F\u7528\u4E24\u4E2A\u6307\u9488 left\uFF0Cright\u3002left \u6307\u5411\u5B57\u7B26\u6570\u7EC4\u5F00\u59CB\u4F4D\u7F6E\uFF0Cright \u6307\u5411\u5B57\u7B26\u6570\u7EC4\u7ED3\u675F\u4F4D\u7F6E\u3002</span>
<span class="token comment"># \u4EA4\u6362 s[left] \u548C s[right]\uFF0C\u5C06 left \u53F3\u79FB\u3001right \u5DE6\u79FB\u3002</span>
<span class="token comment"># \u5982\u679C\u9047\u5230 left == right\uFF0C\u8DF3\u51FA\u5FAA\u73AF</span>

<span class="token comment"># \u4E0D\u8981\u7ED9\u53E6\u5916\u7684\u6570\u7EC4\u5206\u914D\u989D\u5916\u7684\u7A7A\u95F4\uFF0C\u4F60\u5FC5\u987B\u539F\u5730\u4FEE\u6539\u8F93\u5165\u6570\u7EC4\u3001\u4F7F\u7528 O(1) \u7684\u989D\u5916\u7A7A\u95F4\u89E3\u51B3\u8FD9\u4E00\u95EE\u9898</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reverseString</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        left <span class="token operator">=</span> <span class="token number">0</span>
        right <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
            s<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> s<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
            left <span class="token operator">+=</span> <span class="token number">1</span>
            right <span class="token operator">-=</span> <span class="token number">1</span>

    <span class="token comment"># \u4F7F\u7528\u989D\u5916\u7A7A\u95F4</span>
    <span class="token keyword">def</span> <span class="token function">reverseString2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></details>`,1),K={id:"_415-\u5B57\u7B26\u4E32\u76F8\u52A0",tabindex:"-1"},M=n("a",{class:"header-anchor",href:"#_415-\u5B57\u7B26\u4E32\u76F8\u52A0","aria-hidden":"true"},"#",-1),Q=s(),R={href:"https://leetcode.cn/problems/add-strings/description/",target:"_blank",rel:"noopener noreferrer"},U=s("415. \u5B57\u7B26\u4E32\u76F8\u52A0"),X=s(" \u{1F4AF}"),Y=t(`<details class="custom-container details"><summary>415. \u5B57\u7B26\u4E32\u76F8\u52A0</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u63CF\u8FF0\uFF1A\u7ED9\u5B9A\u4E24\u4E2A\u5B57\u7B26\u4E32\u5F62\u5F0F\u7684\u975E\u8D1F\u6574\u6570 num1 \u548Cnum2\u3002</span>

<span class="token comment"># \u8981\u6C42\uFF1A\u8BA1\u7B97\u5B83\u4EEC\u7684\u548C\uFF0C\u5E76\u540C\u6837\u4EE5\u5B57\u7B26\u4E32\u5F62\u5F0F\u8FD4\u56DE\u3002</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">addStrings</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> num2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token string">&quot;&quot;</span>
        i <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        j <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token comment"># \u8FDB\u4F4D</span>
        carry <span class="token operator">=</span> <span class="token number">0</span>
        <span class="token keyword">while</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">or</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            n1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>
            n2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num2<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> j <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>
            tmp <span class="token operator">=</span> n1 <span class="token operator">+</span> n2 <span class="token operator">+</span> carry
            carry <span class="token operator">=</span> tmp <span class="token operator">//</span> <span class="token number">10</span>
            res <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>tmp <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">+</span> res
            i <span class="token operator">-=</span> <span class="token number">1</span>
            j <span class="token operator">-=</span> <span class="token number">1</span>
        <span class="token keyword">return</span> <span class="token string">&quot;1&quot;</span> <span class="token operator">+</span> res <span class="token keyword">if</span> carry <span class="token keyword">else</span> res

<span class="token comment"># \u7528\u4E00\u4E2A\u6570\u7EC4\u5B58\u50A8\u6309\u4F4D\u76F8\u52A0\u540E\u7684\u7ED3\u679C\uFF0C\u6BCF\u4E00\u4F4D\u5BF9\u5E94\u4E00\u4F4D\u6570\u3002</span>
<span class="token comment"># \u7136\u540E\u5206\u522B\u4F7F\u7528\u4E00\u4E2A\u6307\u9488\u53D8\u91CF\uFF0C\u5BF9\u4E24\u4E2A\u6570 num1\u3001num2 \u5B57\u7B26\u4E32\u8FDB\u884C\u53CD\u5411\u904D\u5386\uFF0C\u5C06\u76F8\u52A0\u540E\u7684\u5404\u4E2A\u4F4D\u7F6E\u4E0A\u7684\u7ED3\u679C\u4FDD\u5B58\u5728\u6570\u7EC4\u4E2D\uFF0C\u8FD9\u6837\u8BA1\u7B97\u5B8C\u6210\u4E4B\u540E\u5C31\u5F97\u5230\u4E86\u4E00\u4E2A\u6309\u4F4D\u53CD\u5411\u7684\u7ED3\u679C\u3002</span>
<span class="token comment"># \u6700\u540E\u8FD4\u56DE\u7ED3\u679C\u7684\u65F6\u5019\u5C06\u6570\u7EC4\u53CD\u5411\u8F6C\u4E3A\u5B57\u7B26\u4E32\u5373\u53EF\u3002</span>

    <span class="token keyword">def</span> <span class="token function">addStrings2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> num1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> num2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        carry <span class="token operator">=</span> <span class="token number">0</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        n1 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num1<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        n2 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
        <span class="token keyword">while</span> carry <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token keyword">or</span> n1 <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">or</span> n2 <span class="token operator">&gt;=</span> <span class="token number">0</span><span class="token punctuation">:</span>
            num1_d <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num1<span class="token punctuation">[</span>n1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> n1 <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>
            num2_d <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>num2<span class="token punctuation">[</span>n2<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">if</span> n2 <span class="token operator">&gt;=</span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token number">0</span>
            n1 <span class="token operator">-=</span> <span class="token number">1</span>
            n2 <span class="token operator">-=</span> <span class="token number">1</span>
            num <span class="token operator">=</span> num1_d <span class="token operator">+</span> num2_d <span class="token operator">+</span> carry
            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>num <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            carry <span class="token operator">=</span> num <span class="token operator">//</span> <span class="token number">10</span>

        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br></div></div></details>`,1),Z={id:"_459-\u91CD\u590D\u7684\u5B50\u5B57\u7B26\u4E32",tabindex:"-1"},$=n("a",{class:"header-anchor",href:"#_459-\u91CD\u590D\u7684\u5B50\u5B57\u7B26\u4E32","aria-hidden":"true"},"#",-1),nn=s(),sn={href:"https://leetcode.cn/problems/repeated-substring-pattern/",target:"_blank",rel:"noopener noreferrer"},an=s("459. \u91CD\u590D\u7684\u5B50\u5B57\u7B26\u4E32"),pn=t(`<details class="custom-container details"><summary>459. \u91CD\u590D\u7684\u5B50\u5B57\u7B26\u4E32</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u7ED9\u5B9A\u4E00\u4E2A\u975E\u7A7A\u7684\u5B57\u7B26\u4E32 s \uFF0C\u68C0\u67E5\u662F\u5426\u53EF\u4EE5\u901A\u8FC7\u7531\u5B83\u7684\u4E00\u4E2A\u5B50\u4E32\u91CD\u590D\u591A\u6B21\u6784\u6210\u3002</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">repeatedSubstringPattern</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token boolean">True</span> <span class="token keyword">if</span> s <span class="token keyword">in</span> <span class="token punctuation">(</span>s <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">else</span> <span class="token boolean">False</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></details>`,1),tn={id:"_541-\u53CD\u8F6C\u5B57\u7B26\u4E32-ii",tabindex:"-1"},en=n("a",{class:"header-anchor",href:"#_541-\u53CD\u8F6C\u5B57\u7B26\u4E32-ii","aria-hidden":"true"},"#",-1),on=s(),cn={href:"https://leetcode.cn/problems/reverse-string-ii/",target:"_blank",rel:"noopener noreferrer"},ln=s("541. \u53CD\u8F6C\u5B57\u7B26\u4E32 II"),rn=t(`<details class="custom-container details"><summary>\u53CD\u8F6C\u5B57\u7B26\u4E32 II</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">,</span> k <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            res<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">reversed</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">reverseStr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">def</span> <span class="token function">reverse_str</span><span class="token punctuation">(</span>alist<span class="token punctuation">)</span><span class="token punctuation">:</span>
            left <span class="token operator">=</span> <span class="token number">0</span>
            right <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>alist<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span>
            <span class="token keyword">while</span> left <span class="token operator">&lt;</span> right<span class="token punctuation">:</span>
                alist<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">,</span> alist<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">=</span> alist<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">,</span> alist<span class="token punctuation">[</span>left<span class="token punctuation">]</span>
                left <span class="token operator">+=</span> <span class="token number">1</span>
                right <span class="token operator">-=</span> <span class="token number">1</span>
            <span class="token keyword">return</span> alist

        res <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">,</span> k <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            res<span class="token punctuation">[</span>i<span class="token punctuation">:</span> i <span class="token operator">+</span> k<span class="token punctuation">]</span> <span class="token operator">=</span> reverse_str<span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">:</span> i <span class="token operator">+</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></details>`,1),un={id:"\u5251\u6307-offer-05-\u66FF\u6362\u7A7A\u683C",tabindex:"-1"},kn=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-05-\u66FF\u6362\u7A7A\u683C","aria-hidden":"true"},"#",-1),bn=s(),mn={href:"https://leetcode.cn/problems/ti-huan-kong-ge-lcof/",target:"_blank",rel:"noopener noreferrer"},dn=s("\u5251\u6307 Offer 05. \u66FF\u6362\u7A7A\u683C"),hn=t(`<details class="custom-container details"><summary>\u5251\u6307 Offer 05. \u66FF\u6362\u7A7A\u683C</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">replaceSpace</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">:</span>
            <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token string">&quot; &quot;</span><span class="token punctuation">:</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;%20&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></details>`,1),fn={id:"\u5251\u6307-offer-58-ii-\u5DE6\u65CB\u8F6C\u5B57\u7B26\u4E32",tabindex:"-1"},yn=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-58-ii-\u5DE6\u65CB\u8F6C\u5B57\u7B26\u4E32","aria-hidden":"true"},"#",-1),_n=s(),wn={href:"https://leetcode.cn/problems/zuo-xuan-zhuan-zi-fu-chuan-lcof/",target:"_blank",rel:"noopener noreferrer"},gn=s("\u5251\u6307 Offer 58 - II. \u5DE6\u65CB\u8F6C\u5B57\u7B26\u4E32"),vn=t(`<details class="custom-container details"><summary>\u5251\u6307 Offer 58 - II. \u5DE6\u65CB\u8F6C\u5B57\u7B26\u4E32</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">reverseLeftWords</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> s<span class="token punctuation">[</span>n<span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">reverseLeftWords2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></details>`,1);function xn(qn,jn){const a=e("ExternalLinkIcon");return o(),c(l,null,[i,n("h2",k,[b,m,n("a",d,[h,p(a)]),f]),y,n("h2",_,[w,g,n("a",v,[x,p(a)])]),q,n("h2",j,[S,L,n("a",I,[O,p(a)])]),F,n("h2",N,[T,P,n("a",V,[z,p(a)]),B]),E,n("h2",W,[C,A,n("a",D,[G,p(a)]),H]),J,n("h2",K,[M,Q,n("a",R,[U,p(a)]),X]),Y,n("h2",Z,[$,nn,n("a",sn,[an,p(a)])]),pn,n("h2",tn,[en,on,n("a",cn,[ln,p(a)])]),rn,n("h2",un,[kn,bn,n("a",mn,[dn,p(a)])]),hn,n("h2",fn,[yn,_n,n("a",wn,[gn,p(a)])]),vn],64)}var In=r(u,[["render",xn]]);export{In as default};
