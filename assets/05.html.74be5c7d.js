import{r as e,o,a as c,b as n,d as t,F as l,c as a,e as s}from"./app.897a2dcd.js";import{_ as u}from"./plugin-vue_export-helper.21dcd24c.js";const i={},r=a(`<h1 id="\u6808\u4E0E\u961F\u5217" tabindex="-1"><a class="header-anchor" href="#\u6808\u4E0E\u961F\u5217" aria-hidden="true">#</a> \u6808\u4E0E\u961F\u5217</h1><p>\u6808\u548C\u961F\u5217\u90FD\u6BD4\u8F83\u597D\u7406\u89E3\uFF0C\u6808\u662F\u5148\u8FDB\u540E\u51FA\uFF0C\u961F\u5217\u662F\u5148\u8FDB\u5148\u51FA</p><h2 id="\u6808" tabindex="-1"><a class="header-anchor" href="#\u6808" aria-hidden="true">#</a> \u6808</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># Python \u6CA1\u6709\u5185\u7F6E\u7684\u6808\u7C7B\uFF0C\u53EF\u4EE5\u7528 List \u5F53\u4F5C\u6808\u6765\u4EE3\u66FF</span>
stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
<span class="token comment"># \u5143\u7D20\u5165\u6808</span>
stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>
stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>
<span class="token comment"># \u8BBF\u95EE\u6808\u9876\u5143\u7D20</span>
peek <span class="token operator">=</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
<span class="token comment"># \u5143\u7D20\u51FA\u6808</span>
pop <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token comment"># \u83B7\u53D6\u6808\u7684\u957F\u5EA6</span>
size <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span>
<span class="token comment"># \u5224\u65AD\u662F\u5426\u4E3A\u7A7A</span>
is_empty <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>stack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="\u961F\u5217" tabindex="-1"><a class="header-anchor" href="#\u961F\u5217" aria-hidden="true">#</a> \u961F\u5217</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> collections <span class="token keyword">import</span> deque

<span class="token comment"># \u65B0\u5EFA\u4E00\u4E2A deque\uFF0C\u5E76\u521D\u59CB\u5316\u5185\u5BB9\u4E3A [1, 2, 3]</span>
queue <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>

<span class="token comment"># \u5728\u961F\u5C3E\u63D2\u5165\u5143\u7D20 4</span>
queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span>

<span class="token comment"># \u5728\u961F\u9996\u63D2\u5165\u5143\u7D20 0</span>
queue<span class="token punctuation">.</span>appendleft<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>

<span class="token comment"># \u8BBF\u95EE\u961F\u5217</span>
<span class="token comment"># &gt;&gt;&gt; queue</span>
<span class="token comment"># deque([0, 1, 2, 3, 4])</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="\u6808\u7684\u94FE\u8868\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u6808\u7684\u94FE\u8868\u5B9E\u73B0" aria-hidden="true">#</a> \u6808\u7684\u94FE\u8868\u5B9E\u73B0</h2><h2 id="\u6808\u7684\u6570\u7EC4\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u6808\u7684\u6570\u7EC4\u5B9E\u73B0" aria-hidden="true">#</a> \u6808\u7684\u6570\u7EC4\u5B9E\u73B0</h2><h2 id="\u961F\u5217-1" tabindex="-1"><a class="header-anchor" href="#\u961F\u5217-1" aria-hidden="true">#</a> \u961F\u5217</h2><h2 id="\u961F\u5217\u7684\u94FE\u8868\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u961F\u5217\u7684\u94FE\u8868\u5B9E\u73B0" aria-hidden="true">#</a> \u961F\u5217\u7684\u94FE\u8868\u5B9E\u73B0</h2><h2 id="\u961F\u5217\u7684\u6570\u7EC4\u5B9E\u73B0" tabindex="-1"><a class="header-anchor" href="#\u961F\u5217\u7684\u6570\u7EC4\u5B9E\u73B0" aria-hidden="true">#</a> \u961F\u5217\u7684\u6570\u7EC4\u5B9E\u73B0</h2>`,11),k={id:"_20-\u6709\u6548\u7684\u62EC\u53F7",tabindex:"-1"},b=n("a",{class:"header-anchor",href:"#_20-\u6709\u6548\u7684\u62EC\u53F7","aria-hidden":"true"},"#",-1),m=s(),d={href:"https://leetcode.cn/problems/valid-parentheses/",target:"_blank",rel:"noopener noreferrer"},f=s("20. \u6709\u6548\u7684\u62EC\u53F7"),h=a(`<details class="custom-container details"><summary>20. \u6709\u6548\u7684\u62EC\u53F7</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">False</span>

        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> item <span class="token keyword">in</span> s<span class="token punctuation">:</span>
            <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token string">&quot;(&quot;</span><span class="token punctuation">:</span>
                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;)&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">elif</span> item <span class="token operator">==</span> <span class="token string">&quot;{&quot;</span><span class="token punctuation">:</span>
                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;}&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">elif</span> item <span class="token operator">==</span> <span class="token string">&quot;[&quot;</span><span class="token punctuation">:</span>
                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">&quot;]&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">elif</span> <span class="token keyword">not</span> stack <span class="token keyword">or</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span> item<span class="token punctuation">:</span>
                <span class="token keyword">return</span> <span class="token boolean">False</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token keyword">not</span> stack
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div></details>`,1),_={id:"_150-\u9006\u6CE2\u5170\u8868\u8FBE\u5F0F\u6C42\u503C",tabindex:"-1"},y=n("a",{class:"header-anchor",href:"#_150-\u9006\u6CE2\u5170\u8868\u8FBE\u5F0F\u6C42\u503C","aria-hidden":"true"},"#",-1),w=s(),g={href:"https://leetcode.cn/problems/evaluate-reverse-polish-notation/",target:"_blank",rel:"noopener noreferrer"},v=s("150. \u9006\u6CE2\u5170\u8868\u8FBE\u5F0F\u6C42\u503C"),q=a(`<details class="custom-container details"><summary>150. \u9006\u6CE2\u5170\u8868\u8FBE\u5F0F\u6C42\u503C</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u9006\u6CE2\u5170\u8868\u8FBE\u5F0F\uFF1A\u662F\u4E00\u79CD\u540E\u7F00\u8868\u8FBE\u5F0F\uFF0C\u6240\u8C13\u540E\u7F00\u5C31\u662F\u6307\u8FD0\u7B97\u7B26\u5199\u5728\u540E\u9762\u3002</span>

<span class="token comment"># \u5E73\u5E38\u4F7F\u7528\u7684\u7B97\u5F0F\u5219\u662F\u4E00\u79CD\u4E2D\u7F00\u8868\u8FBE\u5F0F\uFF0C\u5982 ( 1 + 2 ) * ( 3 + 4 ) \u3002</span>

<span class="token comment"># \u8BE5\u7B97\u5F0F\u7684\u9006\u6CE2\u5170\u8868\u8FBE\u5F0F\u5199\u6CD5\u4E3A ( ( 1 2 + ) ( 3 4 + ) * ) \u3002</span>

<span class="token comment"># \u9006\u6CE2\u5170\u8868\u8FBE\u5F0F\u4E3B\u8981\u6709\u4EE5\u4E0B\u4E24\u4E2A\u4F18\u70B9\uFF1A</span>

<span class="token comment"># \u53BB\u6389\u62EC\u53F7\u540E\u8868\u8FBE\u5F0F\u65E0\u6B67\u4E49\uFF0C\u4E0A\u5F0F\u5373\u4FBF\u5199\u6210 1 2 + 3 4 + * \u4E5F\u53EF\u4EE5\u4F9D\u636E\u6B21\u5E8F\u8BA1\u7B97\u51FA\u6B63\u786E\u7ED3\u679C\u3002</span>

<span class="token comment"># \u9002\u5408\u7528\u6808\u64CD\u4F5C\u8FD0\u7B97\uFF1A\u9047\u5230\u6570\u5B57\u5219\u5165\u6808\uFF1B\u9047\u5230\u8FD0\u7B97\u7B26\u5219\u53D6\u51FA\u6808\u9876\u4E24\u4E2A\u6570\u5B57\u8FDB\u884C\u8BA1\u7B97\uFF0C\u5E76\u5C06\u7ED3\u679C\u538B\u5165\u6808\u4E2D\u3002</span>


<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">evalRPN</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tokens<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> item <span class="token keyword">in</span> tokens<span class="token punctuation">:</span>
            <span class="token keyword">if</span> item <span class="token operator">==</span> <span class="token string">&quot;+&quot;</span><span class="token punctuation">:</span>
                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">elif</span> item <span class="token operator">==</span> <span class="token string">&quot;-&quot;</span><span class="token punctuation">:</span>
                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token operator">-</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">elif</span> item <span class="token operator">==</span> <span class="token string">&quot;*&quot;</span><span class="token punctuation">:</span>
                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">elif</span> item <span class="token operator">==</span> <span class="token string">&quot;/&quot;</span><span class="token punctuation">:</span>
                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div></details>`,1),x={id:"_155-\u6700\u5C0F\u6808",tabindex:"-1"},j=n("a",{class:"header-anchor",href:"#_155-\u6700\u5C0F\u6808","aria-hidden":"true"},"#",-1),M=s(),Q={href:"https://leetcode.cn/problems/min-stack/",target:"_blank",rel:"noopener noreferrer"},S=s("155. \u6700\u5C0F\u6808"),N=a(`<details class="custom-container details"><summary>155. \u6700\u5C0F\u6808</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MinStack</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>min_stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>min_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>
            self<span class="token punctuation">.</span>min_stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span>val<span class="token punctuation">,</span> self<span class="token punctuation">.</span>min_stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>min_stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">getMin</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>min_stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

<span class="token comment"># Your MinStack object will be instantiated and called as such:</span>
<span class="token comment"># obj = MinStack()</span>
<span class="token comment"># obj.push(val)</span>
<span class="token comment"># obj.pop()</span>
<span class="token comment"># param_3 = obj.top()</span>
<span class="token comment"># param_4 = obj.getMin()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br></div></div></details>`,1),F={id:"_225-\u7528\u961F\u5217\u5B9E\u73B0\u6808",tabindex:"-1"},C=n("a",{class:"header-anchor",href:"#_225-\u7528\u961F\u5217\u5B9E\u73B0\u6808","aria-hidden":"true"},"#",-1),E=s(),V={href:"https://leetcode.cn/problems/implement-stack-using-queues/",target:"_blank",rel:"noopener noreferrer"},Y=s("225. \u7528\u961F\u5217\u5B9E\u73B0\u6808"),T=a(`<details class="custom-container details"><summary>225. \u7528\u961F\u5217\u5B9E\u73B0\u6808</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyStack</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
        self<span class="token punctuation">.</span>queue_in <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>queue_out <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>queue_in<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>queue_in<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>queue_out<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>queue_in<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>queue_in<span class="token punctuation">,</span> self<span class="token punctuation">.</span>queue_out <span class="token operator">=</span> self<span class="token punctuation">.</span>queue_out<span class="token punctuation">,</span> self<span class="token punctuation">.</span>queue_in
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>queue_out<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">top</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>queue_in<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>queue_in<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>


<span class="token comment"># Your MyStack object will be instantiated and called as such:</span>
<span class="token comment"># obj = MyStack()</span>
<span class="token comment"># obj.push(x)</span>
<span class="token comment"># param_2 = obj.pop()</span>
<span class="token comment"># param_3 = obj.top()</span>
<span class="token comment"># param_4 = obj.empty()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div></details>`,1),B={id:"_232-\u7528\u6808\u5B9E\u73B0\u961F\u5217",tabindex:"-1"},K=n("a",{class:"header-anchor",href:"#_232-\u7528\u6808\u5B9E\u73B0\u961F\u5217","aria-hidden":"true"},"#",-1),L=s(),R={href:"https://leetcode.cn/problems/implement-queue-using-stacks/",target:"_blank",rel:"noopener noreferrer"},z=s("232. \u7528\u6808\u5B9E\u73B0\u961F\u5217"),H=a(`<details class="custom-container details"><summary>232. \u7528\u6808\u5B9E\u73B0\u961F\u5217</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyQueue</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>stack_in <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>stack_out <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>stack_in<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>empty<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token boolean">None</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>stack_out<span class="token punctuation">:</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack_out<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack_in<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>stack_out<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack_in<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> self<span class="token punctuation">.</span>stack_out<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">peek</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        x <span class="token operator">=</span> self<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>stack_out<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>
        <span class="token keyword">return</span> x

    <span class="token keyword">def</span> <span class="token function">empty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>stack_in <span class="token keyword">or</span> self<span class="token punctuation">.</span>stack_out<span class="token punctuation">)</span>


<span class="token comment"># Your MyQueue object will be instantiated and called as such:</span>
<span class="token comment"># obj = MyQueue()</span>
<span class="token comment"># obj.push(x)</span>
<span class="token comment"># param_2 = obj.pop()</span>
<span class="token comment"># param_3 = obj.peek()</span>
<span class="token comment"># param_4 = obj.empty()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div></details>`,1),I={id:"_239-\u6ED1\u52A8\u7A97\u53E3\u6700\u5927\u503C",tabindex:"-1"},O=n("a",{class:"header-anchor",href:"#_239-\u6ED1\u52A8\u7A97\u53E3\u6700\u5927\u503C","aria-hidden":"true"},"#",-1),P=s(),D={href:"https://leetcode.cn/problems/sliding-window-maximum/",target:"_blank",rel:"noopener noreferrer"},W=s("239. \u6ED1\u52A8\u7A97\u53E3\u6700\u5927\u503C"),A=a(`<details class="custom-container details"><summary>239. \u6ED1\u52A8\u7A97\u53E3\u6700\u5927\u503C</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">maxSlidingWindow</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        queue <span class="token operator">=</span> MyQueue<span class="token punctuation">(</span><span class="token punctuation">)</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># \u5148\u5C06\u524Dk\u7684\u5143\u7D20\u653E\u8FDB\u961F\u5217</span>
            queue<span class="token punctuation">.</span>push<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>
        res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>queue<span class="token punctuation">.</span>front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># \u8BB0\u5F55\u524Dk\u7684\u5143\u7D20\u7684\u6700\u5927\u503C</span>

        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i <span class="token operator">-</span> k<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># \u6ED1\u52A8\u7A97\u53E3\u79FB\u9664\u6700\u524D\u9762\u5143\u7D20</span>
            queue<span class="token punctuation">.</span>push<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment"># \u6ED1\u52A8\u7A97\u53E3\u524D\u52A0\u5165\u6700\u540E\u9762\u7684\u5143\u7D20</span>
            res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>queue<span class="token punctuation">.</span>front<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># \u8BB0\u5F55\u5BF9\u5E94\u7684\u6700\u5927\u503C</span>
        <span class="token keyword">return</span> res


<span class="token keyword">class</span> <span class="token class-name">MyQueue</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">from</span> collections <span class="token keyword">import</span> deque
        self<span class="token punctuation">.</span>queue <span class="token operator">=</span> deque<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># \u6BCF\u6B21\u5F39\u51FA\u7684\u65F6\u5019\uFF0C\u6BD4\u8F83\u5F53\u524D\u8981\u5F39\u51FA\u7684\u6570\u503C\u662F\u5426\u7B49\u4E8E\u961F\u5217\u51FA\u53E3\u5143\u7D20\u7684\u6570\u503C\uFF0C\u5982\u679C\u76F8\u7B49\u5219\u5F39\u51FA</span>
    <span class="token comment"># \u540C\u65F6pop\u4E4B\u524D\u5224\u65AD\u961F\u5217\u5F53\u524D\u662F\u5426\u4E3A\u7A7A</span>
    <span class="token keyword">def</span> <span class="token function">pop</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> self<span class="token punctuation">.</span>queue <span class="token keyword">and</span> val <span class="token operator">==</span> self<span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>popleft<span class="token punctuation">(</span><span class="token punctuation">)</span>

    <span class="token comment"># \u5982\u679Cpush\u7684\u6570\u503C\u5927\u4E8E\u5165\u53E3\u5143\u7D20\u7684\u6570\u503C\uFF0C\u90A3\u4E48\u5C31\u5C06\u961F\u5217\u540E\u7AEF\u7684\u6570\u503C\u5F39\u51FA\uFF0C\u76F4\u5230push\u7684\u6570\u503C\u5C0F\u4E8E\u7B49\u4E8E\u961F\u5217\u5165\u53E3\u5143\u7D20\u7684\u6570\u503C\u4E3A\u6B62</span>
    <span class="token comment"># \u8FD9\u6837\u5C31\u4FDD\u6301\u4E86\u961F\u5217\u91CC\u7684\u6570\u503C\u662F\u5355\u8C03\u4ECE\u5927\u5230\u5C0F\u7684\u4E86</span>
    <span class="token keyword">def</span> <span class="token function">push</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">while</span> self<span class="token punctuation">.</span>queue <span class="token keyword">and</span> val <span class="token operator">&gt;</span> self<span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
            self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        self<span class="token punctuation">.</span>queue<span class="token punctuation">.</span>append<span class="token punctuation">(</span>val<span class="token punctuation">)</span>

    <span class="token comment"># \u5F53\u524D\u961F\u5217\u91CC\u7684\u6700\u5927\u503C</span>
    <span class="token keyword">def</span> <span class="token function">front</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br></div></div></details>`,1),G={id:"_347-\u524D-k-\u4E2A\u9AD8\u9891\u5143\u7D20",tabindex:"-1"},J=n("a",{class:"header-anchor",href:"#_347-\u524D-k-\u4E2A\u9AD8\u9891\u5143\u7D20","aria-hidden":"true"},"#",-1),U=s(),X={href:"https://leetcode.cn/problems/top-k-frequent-elements/",target:"_blank",rel:"noopener noreferrer"},Z=s("347. \u524D K \u4E2A\u9AD8\u9891\u5143\u7D20"),$=a(`<details class="custom-container details"><summary>347. \u524D K \u4E2A\u9AD8\u9891\u5143\u7D20</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">topKFrequent</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        maps <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        <span class="token comment"># \u4E00\u6B21\u5FAA\u73AF\u8DD1\u51FA\u5143\u7D20\u51FA\u73B0\u7684\u6B21\u6570</span>
        <span class="token comment"># nums[i] \u5BF9\u5E94\u51FA\u73B0\u7684\u6B21\u6570</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            maps<span class="token punctuation">[</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> maps<span class="token punctuation">.</span>get<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>

        <span class="token comment"># \u5BF9\u9891\u6B21\u6392\u5E8F</span>
        <span class="token comment"># \u5C0F\u9876\u5806</span>
        <span class="token keyword">import</span> heapq
        small_que <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token keyword">in</span> maps<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            heapq<span class="token punctuation">.</span>heappush<span class="token punctuation">(</span>small_que<span class="token punctuation">,</span> <span class="token punctuation">(</span>val<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>small_que<span class="token punctuation">)</span> <span class="token operator">&gt;</span> k<span class="token punctuation">:</span>
                heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>small_que<span class="token punctuation">)</span>

        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> k
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>k <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> heapq<span class="token punctuation">.</span>heappop<span class="token punctuation">(</span>small_que<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div></details>`,1),nn={id:"_622-\u8BBE\u8BA1\u5FAA\u73AF\u961F\u5217",tabindex:"-1"},sn=n("a",{class:"header-anchor",href:"#_622-\u8BBE\u8BA1\u5FAA\u73AF\u961F\u5217","aria-hidden":"true"},"#",-1),an=s(),pn={href:"https://leetcode.cn/problems/design-circular-queue/",target:"_blank",rel:"noopener noreferrer"},tn=s("622. \u8BBE\u8BA1\u5FAA\u73AF\u961F\u5217"),en=a(`<details class="custom-container details"><summary>622. \u8BBE\u8BA1\u5FAA\u73AF\u961F\u5217</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">MyCircularQueue</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>


    <span class="token keyword">def</span> <span class="token function">enQueue</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>


    <span class="token keyword">def</span> <span class="token function">deQueue</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>


    <span class="token keyword">def</span> <span class="token function">Front</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>


    <span class="token keyword">def</span> <span class="token function">Rear</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>


    <span class="token keyword">def</span> <span class="token function">isEmpty</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>


    <span class="token keyword">def</span> <span class="token function">isFull</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">bool</span><span class="token punctuation">:</span>



<span class="token comment"># Your MyCircularQueue object will be instantiated and called as such:</span>
<span class="token comment"># obj = MyCircularQueue(k)</span>
<span class="token comment"># param_1 = obj.enQueue(value)</span>
<span class="token comment"># param_2 = obj.deQueue()</span>
<span class="token comment"># param_3 = obj.Front()</span>
<span class="token comment"># param_4 = obj.Rear()</span>
<span class="token comment"># param_5 = obj.isEmpty()</span>
<span class="token comment"># param_6 = obj.isFull()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div></details>`,1),on={id:"_739-\u6BCF\u65E5\u6E29\u5EA6",tabindex:"-1"},cn=n("a",{class:"header-anchor",href:"#_739-\u6BCF\u65E5\u6E29\u5EA6","aria-hidden":"true"},"#",-1),ln=s(),un={href:"https://leetcode.cn/problems/daily-temperatures/",target:"_blank",rel:"noopener noreferrer"},rn=s("739. \u6BCF\u65E5\u6E29\u5EA6"),kn=a(`<details class="custom-container details"><summary>739. \u6BCF\u65E5\u6E29\u5EA6</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token comment"># \u63CF\u8FF0\uFF1A\u7ED9\u5B9A\u4E00\u4E2A\u5217\u8868 temperatures\uFF0Ctemperatures[i] \u8868\u793A\u7B2C i \u5929\u7684\u6C14\u6E29\u3002</span>

<span class="token comment"># \u8981\u6C42\uFF1A\u8F93\u51FA\u4E00\u4E2A\u5217\u8868\uFF0C\u5217\u8868\u4E0A\u6BCF\u4E2A\u4F4D\u7F6E\u4EE3\u8868\u300C\u5982\u679C\u8981\u89C2\u6D4B\u5230\u66F4\u9AD8\u7684\u6C14\u6E29\uFF0C\u81F3\u5C11\u9700\u8981\u7B49\u5F85\u7684\u5929\u6570\u300D\u3002\u5982\u679C\u4E4B\u540E\u7684\u6C14\u6E29\u4E0D\u518D\u5347\u9AD8\uFF0C\u5219\u7528 0 \u6765\u4EE3\u66FF\u3002</span>

<span class="token comment"># \u7ED9\u5B9A\u4E00\u4E2A\u6574\u6570\u6570\u7EC4 temperatures \uFF0C\u8868\u793A\u6BCF\u5929\u7684\u6E29\u5EA6\uFF0C\u8FD4\u56DE\u4E00\u4E2A\u6570\u7EC4 answer</span>
<span class="token comment"># \u5176\u4E2D answer[i] \u662F\u6307\u5BF9\u4E8E\u7B2C i \u5929\uFF0C\u4E0B\u4E00\u4E2A\u66F4\u9AD8\u6E29\u5EA6\u51FA\u73B0\u5728\u51E0\u5929\u540E\u3002\u5982\u679C\u6C14\u6E29\u5728\u8FD9\u4E4B\u540E\u90FD\u4E0D\u4F1A\u5347\u9AD8\uFF0C\u8BF7\u5728\u8BE5\u4F4D\u7F6E\u7528 0 \u6765\u4EE3\u66FF\u3002</span>

<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">dailyTemperatures</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temperatures<span class="token punctuation">)</span><span class="token punctuation">:</span>
        n <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temperatures<span class="token punctuation">)</span>
        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>
            temperature <span class="token operator">=</span> temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span>
            <span class="token keyword">while</span> stack <span class="token keyword">and</span> temperature <span class="token operator">&gt;</span> temperatures<span class="token punctuation">[</span>stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                index <span class="token operator">=</span> stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
                res<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> index
            stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>

        <span class="token keyword">return</span> res
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br></div></div></details>`,1),bn={id:"_1047-\u5220\u9664\u5B57\u7B26\u4E32\u4E2D\u7684\u6240\u6709\u76F8\u90BB\u91CD\u590D\u9879",tabindex:"-1"},mn=n("a",{class:"header-anchor",href:"#_1047-\u5220\u9664\u5B57\u7B26\u4E32\u4E2D\u7684\u6240\u6709\u76F8\u90BB\u91CD\u590D\u9879","aria-hidden":"true"},"#",-1),dn=s(),fn={href:"https://leetcode.cn/problems/remove-all-adjacent-duplicates-in-string/",target:"_blank",rel:"noopener noreferrer"},hn=s("1047. \u5220\u9664\u5B57\u7B26\u4E32\u4E2D\u7684\u6240\u6709\u76F8\u90BB\u91CD\u590D\u9879"),_n=a(`<details class="custom-container details"><summary>1047. \u5220\u9664\u5B57\u7B26\u4E32\u4E2D\u7684\u6240\u6709\u76F8\u90BB\u91CD\u590D\u9879</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">removeDuplicates</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">str</span><span class="token punctuation">:</span>
        stack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        <span class="token keyword">for</span> item <span class="token keyword">in</span> s<span class="token punctuation">:</span>
            <span class="token keyword">if</span> stack <span class="token keyword">and</span> stack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> item<span class="token punctuation">:</span>
                stack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token keyword">else</span><span class="token punctuation">:</span>
                stack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>item<span class="token punctuation">)</span>
        <span class="token keyword">return</span> <span class="token string">&quot;&quot;</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>stack<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div></details>`,1),yn={id:"\u5251\u6307-offer-09-\u7528\u4E24\u4E2A\u6808\u5B9E\u73B0\u961F\u5217",tabindex:"-1"},wn=n("a",{class:"header-anchor",href:"#\u5251\u6307-offer-09-\u7528\u4E24\u4E2A\u6808\u5B9E\u73B0\u961F\u5217","aria-hidden":"true"},"#",-1),gn=s(),vn={href:"https://leetcode.cn/problems/yong-liang-ge-zhan-shi-xian-dui-lie-lcof/",target:"_blank",rel:"noopener noreferrer"},qn=s("\u5251\u6307 Offer 09. \u7528\u4E24\u4E2A\u6808\u5B9E\u73B0\u961F\u5217"),xn=a(`<details class="custom-container details"><summary>\u5251\u6307 Offer 09. \u7528\u4E24\u4E2A\u6808\u5B9E\u73B0\u961F\u5217</summary><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">class</span> <span class="token class-name">CQueue</span><span class="token punctuation">:</span>

    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>instack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>outstack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>

    <span class="token keyword">def</span> <span class="token function">appendTail</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> value<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
        self<span class="token punctuation">.</span>instack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>value<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">deleteHead</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token builtin">int</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>outstack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>instack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>
        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>outstack<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>
            <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>instack<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>
                self<span class="token punctuation">.</span>outstack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>instack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
                self<span class="token punctuation">.</span>instack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        top <span class="token operator">=</span> self<span class="token punctuation">.</span>outstack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>
        self<span class="token punctuation">.</span>outstack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> top


<span class="token comment"># Your CQueue object will be instantiated and called as such:</span>
<span class="token comment"># obj = CQueue()</span>
<span class="token comment"># obj.appendTail(value)</span>
<span class="token comment"># param_2 = obj.deleteHead()</span>
</code></pre><div class="line-numbers" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br></div></div></details>`,1);function jn(Mn,Qn){const p=e("ExternalLinkIcon");return o(),c(l,null,[r,n("h2",k,[b,m,n("a",d,[f,t(p)])]),h,n("h2",_,[y,w,n("a",g,[v,t(p)])]),q,n("h2",x,[j,M,n("a",Q,[S,t(p)])]),N,n("h2",F,[C,E,n("a",V,[Y,t(p)])]),T,n("h2",B,[K,L,n("a",R,[z,t(p)])]),H,n("h2",I,[O,P,n("a",D,[W,t(p)])]),A,n("h2",G,[J,U,n("a",X,[Z,t(p)])]),$,n("h2",nn,[sn,an,n("a",pn,[tn,t(p)])]),en,n("h2",on,[cn,ln,n("a",un,[rn,t(p)])]),kn,n("h2",bn,[mn,dn,n("a",fn,[hn,t(p)])]),_n,n("h2",yn,[wn,gn,n("a",vn,[qn,t(p)])]),xn],64)}var Fn=u(i,[["render",jn]]);export{Fn as default};
